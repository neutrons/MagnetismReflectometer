#!/usr/bin/env python
"""Templated autoreduction script for REF_M"""
# standard imports
import argparse
from collections import namedtuple
import logging
import os
import re
import subprocess
import sys
import traceback
from typing import List
import warnings

# third-party imports
from mr_reduction.mr_reduction import ReductionProcess
from mr_reduction.web_report import save_report, upload_report

warnings.simplefilter('ignore')
CONDA_ENV = 'mr_reduction'


class ContextFilter(logging.Filter):
    """ Simple log filter to take out non-Mantid logs from .err file """

    def filter(self, record):
        filtered_logs = ["Optimal parameters not found"]
        msg = record.getMessage()
        if record.levelname == 'WARNING':
            return 0
        for item in filtered_logs:
            if item in msg:
                return 0
        return 1

logger = logging.getLogger()
f = ContextFilter()
logger.addFilter(f)


def _as_bool(value):
    r"""Cast a string to bool"""
    if isinstance(value, str):
        if value.lower() == 'false':
            return False
    return bool(value)


def reduction_user_options():
    r"""Collects all values defined by the user in https://monitor.sns.gov/reduction/ref_m/"""
    # Options common to all peaks:
    kwargs_common = dict(
        const_q_binning=_as_bool(${use_const_q}),
        q_step=float(${q_step}),
        use_sangle = _as_bool(${use_sangle}),
        update_peak_range=_as_bool(${fit_peak_in_roi}),
        publish = False  # uploading to livedata server to be done later by `upload_report()`
    )

    # Options for Peak 1
    kwargs_peak_1 = dict(
        use_roi=True,
        force_peak_roi=_as_bool(${force_peak}),
        peak_roi=[int(${peak_min}), int(${peak_max})],
        use_roi_bck=False,
        force_bck_roi=_as_bool(${force_background}),
        bck_roi=[int(${bck_min}), int(${bck_max})],
        use_tight_bck=${use_side_bck},
        bck_offset=int(${bck_width}),
        force_low_res = _as_bool(${force_low_res}),
        low_res_roi = [int(${low_res_min}), int(${low_res_max})]
    )

    # Options for Peak 2
    kwargs_peak_2 = dict(
        use_roi=True,
        force_peak_roi=_as_bool(${force_peak_s2}),
        peak_roi=[int(${peak_min_s2}), int(${peak_max_s2})],
        use_roi_bck=False,
        force_bck_roi=_as_bool(${force_background_s2}),
        bck_roi = [int(${bck_min_s2}), int(${bck_max_s2})],
        use_tight_bck=_as_bool(${use_side_bck_s2}),
        bck_offset=int(${bck_width_s2}),
        force_low_res = _as_bool(${force_low_res_s2}),
        low_res_roi = [int(${low_res_min_s2}), int(${low_res_max_s2})]
    )

    # Options for Peak 3
    kwargs_peak_3 = dict(
        use_roi=True,
        force_peak_roi=_as_bool(${force_peak_s3}),
        peak_roi=[int(${peak_min_s3}), int(${peak_max_s3})],
        use_roi_bck=False,
        force_bck_roi=_as_bool(${force_background_s3}),
        bck_roi=[int(${bck_min_s3}), int(${bck_max_s3})],
        use_tight_bck=_as_bool(${use_side_bck_s3}),
        bck_offset=int(${bck_width_s3}),
        force_low_res = _as_bool(${force_low_res_s3}),
        low_res_roi = [int(${low_res_min_s3}), int(${low_res_max_s3})]
    )

    # Do we have more than one peak in this run?
    peak_count = int(${peak_count})
    ReductionOptions = namedtuple('ReductionOptions', 'common, peak_count, peak1, peak2, peak3')
    return ReductionOptions(kwargs_common, peak_count, kwargs_peak_1, kwargs_peak_2, kwargs_peak_3)

def reduce_events(filename=None, workspace=None, outdir=None, **other_options) -> List[str]:
    assert (filename is not None) or (workspace is not None), "Either filename or workspace must be provided"
    reports = list()  # autoreduction reports for each peak in the run, in HTML format
    opts = reduction_user_options()
    assert opts.peak_count <= 3, "Peak count must be <= 3"
    kwargs_peaks = [opts.peak1, opts.peak2, opts.peak3]
    peak_numbers = [None, ] if opts.peak_count == 1 else range(1, opts.peak_count + 1)  # numbers start at 1, not 0
    for i, peak_number in enumerate(peak_numbers):
        d = dict(data_run=filename, data_ws=workspace, output_dir=outdir, peak_number=peak_number)
        kwargs = {**d, **opts.common, **kwargs_peaks[i], **other_options}  # merge all partial dicts
        reports.append(ReductionProcess(**kwargs).reduce())
    return reports

def reduce_events_file(event_file_path, outdir):
    return reduce_events(filename=event_file_path, outdir=outdir)

def parse_command_arguments():
    parser = argparse.ArgumentParser(description='Autoreduction script for REF_M')
    parser.add_argument('events_file', type=str, help='Path to the Nexus events file.')
    parser.add_argument('outdir', type=str, help='Output directory path.')
    parser.add_argument('--no_publish', action='store_true', help='Do not upload HTML report to the livedata server.')
    return parser.parse_args()


def main():
    r"""Autoreduce a single events file and upload the HTML report to the livedata server"""
    args = parse_command_arguments()
    os.makedirs(args.outdir, exist_ok=True)
    reports = reduce_events_file(args.events_file, args.outdir)

    # Save to disk and (optionally) upload the HTML report
    run_number = re.search(r'REF_M_(\d+)', args.events_file).group(1)
    save_report(reports, os.path.join(args.outdir, f'REF_M_{run_number}.html'))  # save HTML report
    if not args.no_publish:
        upload_report(reports, run_number=run_number)

    # Check if the auto-reduce data has been saved to the canonical IPTS-XXXXX/shared/autoreduce directory
    ipts = re.search(r'IPTS-\d+', args.events_file).group(0)  # extract 'IPTS-31954' from the events file
    ipts_number = ipts.split('-')[1]
    try:
        cmd = f"/SNS/software/nses/bin/confirm-data -s Yes BL-4A {ipts_number} 1 Auto"
        print(cmd)
        subprocess.run(cmd, shell=True, check=True)
    except subprocess.CalledProcessError as e:
        print("Could not set data availability")
        traceback.print_exc()
        sys.exit(e.returncode)


if __name__ == "__main__":
    main()
