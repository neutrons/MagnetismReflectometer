"""
Script digested by Mantid algorithm LoadLiveData.
LoadLiveData creates child algorithm "RunPythonScript" and runs it in a separate python interpreter process as
    RunPythonScript(InputWorkspace=input, Filename="reduce_REF_M_live_post_proc.py")
where "input" is the EventWorkspace containing the events accumulated up to the time when the script is run.
"""

# standard library imports
import math
import os
import time
import traceback
from typing import List, Optional

# third-party imports
import mantid
from mantid import simpleapi as api
from mantid.dataobjects import EventWorkspace

# mr_reduction and mr_livereduce imports
from mr_livereduce.polarization_analysis import calculate_ratios
from mr_reduction.settings import GLOBAL_AR_DIR
from mr_reduction.simple_utils import SampleLogs, add_to_sys_path, workspace_handle
from mr_reduction.types import MantidWorkspace
from mr_reduction.web_report import _plot1d, save_report, upload_report

GLOBAL_LR_DIR = "/SNS/REF_M/shared/livereduce"


def rebin_tof(input_workspace: MantidWorkspace, output_workspace: str = None) -> mantid.dataobjects.EventWorkspace:
    """
    Rebin the input workspace to a fixed binning of 50 microseconds.

    The input workspace is overwritten only when `output_workspace` is the name of `input_workspace`.

    Parameters
    ----------
    input_workspace
        The input workspace to be rebinned as an EventWorkspace or the name of the workspace
    output_workspace
        The name of the rebinned workspace. If None, a unique name will be generated.

    Returns
    -------

    """
    ws = workspace_handle(input_workspace)
    tof_min = math.floor(ws.getTofMin())
    tof_max = math.ceil(ws.getTofMax())
    assert tof_min < tof_max, "Found min TOF > max TOF in aggregated input Events workspace"
    if not output_workspace:
        output_workspace = api.mtd.unique_hidden_name()  #  new workspace with a hidden name
    return api.Rebin(ws, params=f"{tof_min}, 50, {tof_max}", PreserveEvents=True, OutputWorkspace=output_workspace)


def header_report(workspace: MantidWorkspace) -> str:
    """
    Basic information on the run.

    The header is the beginning of the HTML report to be uploaded to the livedata server.

    Parameters
    ----------
    workspace
        The input workspace with the accumulated events
    """
    try:
        samplelogs = SampleLogs(workspace)
        report = f"<div>Run Number: {workspace.getRunNumber()}</div>\n"
        report += f"<div>Events: {workspace.getNumberEvents()}</div>\n"
        report += f"<div>Sequence: {samplelogs['sequence_number']} of {samplelogs['sequence_total']}</div>\n"
        report += f"<div>Report time: {time.ctime()}</div>\n"
        report += "<hr>\n"  # insert a horizontal line
    except Exception as exception:  # noqa E722
        report = f"<div>{exception}</div>\n"
    return report


def polarization_report(workspace: MantidWorkspace) -> str:
    """
    Basic information on the polarization of the run, such as sping flipping ratios and asymmetry.

    The polarization report is the last part of the HTML report to be uploaded to the livedata server.

    Parameters
    ----------
    workspace
        The input workspace with the accumulated events
    """

    def div_plot1d(ratio: Optional[MantidWorkspace], y_label: str):
        if ratio is not None:
            plot = _plot1d(
                ratio.readX(0),
                ratio.readY(0),
                x_range=None,
                x_label="Wavelength",
                y_label=y_label,
                title="",
                x_log=False,
                y_log=False,
            )
            return f"<td>{plot}</td>\n"
        return ""

    report = "<hr>\n"  # insert a horizontal line
    try:
        ws_list, ratio1, ratio2, asym1, labels = calculate_ratios(workspace, delta_wl=0.05, slow_filter=True)
        report += "<table style='width:100%'>\n"
        report += f"<tr><td>Number of polarization states: {len(ws_list)}</td></tr>\n"
        report += "<tr>\n"
        for quantity, label in zip([ratio1, ratio2, asym1], labels):
            report += div_plot1d(quantity, label)
        report += "</tr>\n"
        report += "</table>\n"
    except Exception as exception:  # noqa E722
        report += f"<div>Error: {exception}</div>\n"
    return report


def main(input_workspace: EventWorkspace, outdir: str = None, publish: bool = False):
    """
    Livereduce the accumulation events workspace

    Parameters
    ----------
    input_workspace: EventWorkspace
        The input workspace containing the accumulated events to be reduced.
    outdir: str
        The directory where the reduction files will be saved. If `None`,
        the output is set to /SNS/REF_M/IPTS-XXXX/shared/autoreduce,
        where `XXXX` is the IPTS number extracted from the input workspace.
    publish: bool
        Upload the HTML report generated by the reduction into the livedata server
    """
    run_number = 0
    try:
        run_number = input_workspace.getRunNumber()
    except:  # noqa E722
        api.logger.error("Post-Processing: Unable to get run number from the accumulated-events workspace")
        return
    if run_number == 0:
        api.logger.error("Post-Processing: Run number is 0 in the accumulated-events workspace")
        return
    if outdir is None:
        ipts = SampleLogs(input_workspace)["experiment_identifier"]  # e.g. 'IPTS-31954'
        outdir = f"/SNS/REF_M/{ipts}/shared/autoreduce/"
    else:
        os.makedirs(outdir, exist_ok=True)

    live_report = [header_report(input_workspace)]
    with add_to_sys_path(GLOBAL_AR_DIR):  # "/SNS/REF_M/shared/autoreduce"
        # import from the autoreduction script reduce_REF_M.py
        from reduce_REF_M import reduce_events

        # rebin the input workspace to a fixed binning of 50 microseconds
        try:
            events_binned = rebin_tof(input_workspace)
        except Exception as exception:  # noqa E722
            error_message = f"\nERROR in Post-Processing.rebin_tof(): {exception}\n{traceback.format_exc()}"
            file_path = os.path.join(GLOBAL_LR_DIR, "input_workspace.nxs")
            try:
                api.SaveNexus(InputWorkspace=input_workspace, Filename=file_path)
                error_message += f"\nSaved input_workspace to {file_path}\n"
            except Exception as exception:  # noqa E722
                error_message += f"\nUnable to save input_workspace {exception}\n{traceback.format_exc()} \n"
            report = [f"<div><pre>{error_message}</pre></div>\n"]
            api.logger.error(error_message)
            live_report += report

        # reduce the accumulated events and generate a report containing plots for the reflectivity curves
        try:
            report: List[str] = reduce_events(
                workspace=events_binned, outdir=outdir, logfile=os.path.join(GLOBAL_LR_DIR, "livereduce_REF_M.log")
            )
        except Exception as exception:  # noqa E722
            # collect error message and save the accumulated events to a file for debugging
            error_message = f"\nERROR in Post-Processing.reduce_events(): {exception}\n{traceback.format_exc()}"
            file_path = os.path.join(GLOBAL_LR_DIR, "accumulated.nxs")
            api.SaveNexus(InputWorkspace=events_binned, Filename=file_path)
            error_message += f"\nSaved accumulated events to {file_path}\n"
            report = [f"<div><pre>{error_message}</pre></div>\n"]
            api.logger.error(error_message)
        live_report += report

        # add the polarization report to the live report
        try:
            report: str = polarization_report(events_binned)
        except Exception as exception:  # noqa E722
            # collect error message
            error_message = f"ERROR in Post-Processing.polarization_report(): {exception}\n{traceback.format_exc()}"
            report: str = f"<div><pre>{error_message}</pre></div>\n"
            api.logger.error(error_message)
        live_report.append(report)

        # Save to disk and (optionally) upload the HTML report
        save_report(live_report, os.path.join(outdir, f"REF_M_{run_number}.html"))  # save HTML report
        if publish:
            upload_report(live_report, run_number=run_number)


if __name__ == "__main__":
    main(input, publish=True)
    # Algorithm StartLiveData as invoked by livereduce.py requires an output workspace of name "result"
    output = api.LoadEmptyInstrument(InstrumentName="REF_M", OutputWorkspace="result")
