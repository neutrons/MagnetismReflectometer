#!/usr/bin/env python
import logging
import sys, os

sys.path.insert(0, '/opt/mantid64/bin')
#CONDA_ENV = 'mantid'

class ContextFilter(logging.Filter):
    """ Simple log filter to take out non-Mantid logs from .err file """

    def filter(self, record):
        filtered_logs = ["Optimal parameters not found"]
        msg = record.getMessage()
        if record.levelname == 'WARNING':
            return 0
        for item in filtered_logs:
            if item in msg:
                return 0
        return 1

logger = logging.getLogger()
f = ContextFilter()
logger.addFilter(f)

from mr_reduction import mr_reduction as refm
from mr_reduction import oncat_comm as oncat

if __name__=="__main__":
    """
    Options:
        Use SANGLE:       ${use_sangle}
        Use Const-Q:      ${use_const_q}
        Fit peak in roi:  ${fit_peak_in_roi}
        Use bck ROI:      ${use_roi_bck}
        Force peak:       ${force_peak} [${peak_min}, ${peak_max}]
        Force background: ${force_background} [${bck_min}, ${bck_max}]
        Use side bck:     ${use_side_bck}
        Bck width:        ${bck_width}
        Produce 2D plots  ${plot_in_2D}
        Q step:           ${q_step}

    Not used yet:
        Const-Q cutoff:   ${const_q_cutoff}

START_JSON
{"use_sangle":${use_sangle}, "use_const_q":${use_const_q}, "fit_peak_in_roi":${fit_peak_in_roi}, "use_roi_bck":${use_roi_bck},
 "force_peak":${force_peak}, "peak_min":${peak_min}, "peak_max":${peak_max}, "force_background":${force_background},
 "bck_min":${bck_min}, "bck_max":${bck_max}, "use_side_bck":${use_side_bck}, "bck_width":${bck_width}, "plot_2d":${plot_in_2D}, "q_step":-0.02}
END_JSON
    """

    event_file_path=sys.argv[1]
    event_file = os.path.split(event_file_path)[-1]
    outdir=sys.argv[2]
    # The legacy format is REF_L_xyz_event.nxs
    # The new format is REF_L_xyz.nxs.h5
    run_number = event_file.split('_')[2]
    run_number = run_number.replace('.nxs.h5', '')
    # The following line is generated from the template
    # use_roi_bck = ${use_roi_bck} and not ${force_background}
    use_roi_bck = ${use_roi_bck} and not ${force_background}

    red = refm.ReductionProcess(data_run=event_file_path,
                                output_dir=outdir,
                                use_sangle=${use_sangle},
                                const_q_binning=${use_const_q},
                                const_q_cutoff=${const_q_cutoff},
                                update_peak_range=${fit_peak_in_roi},
                                use_roi=True,
                                use_roi_bck=False,
                                q_step=${q_step},
                                force_peak_roi=${force_peak}, peak_roi=[${peak_min}, ${peak_max}],
                                force_bck_roi=${force_background}, bck_roi=[${bck_min}, ${bck_max}],
                                use_tight_bck=${use_side_bck}, bck_offset=${bck_width})
    red.plot_2d = ${plot_in_2D}
    red.reduce()

    try:
        ipts = outdir.split('/')[3]
        ipts_number = ipts.split('-')[1]
        cmd = "/SNS/software/nses/bin/confirm-data -s Yes BL-4A %s 1 Auto" % ipts_number
        print(cmd)
        os.system(cmd)
    except:
        print("Could not set data availability")
        print(sys.exc_info()[1])
